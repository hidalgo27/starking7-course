<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Course extends Model
{
    use HasFactory;

    protected $guarded = ['id', 'status'];
    protected $withCount = ['students', 'reviews'];

    const BORRADOR = 1;
    const REVISION = 2;
    const PUBLICADO = 3;

    public function getRatingAttribute(){

        if ($this->reviews_count){
            return round($this->reviews->avg('rating'), 1);
        }else{
            return 5;
        }

    }

    //Query scopes
    public function scopeSstudents($query, $user_id) {
        if ($user_id) {
            return $query->where('user_id', $user_id);
        }
    }

    public function scopeTeacher($query, $name) {
        if ($name) {
            return $query->orWhere('name', 'LIKE', '%' . $name . '%');
        }
    }

    //Query scopes
    public function scopeCategory($query, $category_id) {
        if ($category_id) {
            return $query->where('category_id', $category_id);
        }
    }
    //Query level
    public function scopeLevel($query, $level_id) {
        if ($level_id) {
            return $query->where('category_id', $level_id);
        }
    }


    public function getRouteKeyName()
    {
//        return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
        return "slug";
    }

    //relacion uno a uno

    public function observation(){
        return $this->hasOne(Observation::class);
    }

    //Relacion uno a muchos

    public function reviews(){
        return $this->hasMany('App\Models\Review');
    }

    public function requirements(){
        return $this->hasMany('App\Models\Requirement');
    }

    public function goals(){
        return $this->hasMany(Goal::class);
    }

    public function audiences(){
        return $this->hasMany('App\Models\Audience');
    }

    public function sections(){
        return $this->hasMany('App\Models\Section');
    }

    public function course_certification(){
        return $this->hasMany(CourseCertification::class);
    }

    //Relacion uno a muchos inversa
    public function teacher(){
        return $this->belongsTo(User::class, 'user_id');
    }

    public function level(){
        return $this->belongsTo('App\Models\Level');
    }

    public function category(){
        return $this->belongsTo(Category::class);
    }

    public function price(){
        return $this->belongsTo(Price::class);
    }

    //Relacion muchos a muchos
    public function students(){
        return $this->belongsToMany(User::class);
    }

    public function course_user(){
        return $this->hasMany(CourseUser::class, 'course_id');
    }

    //Relacion uno a uno polimorfica

    public function image(){
        return $this->morphOne('App\Models\Image', 'imageable');
    }

    //Relacion hasManyThrough
    public function lessons(){
        return $this->hasManyThrough(Lesson::class, Section::class);
    }
}
